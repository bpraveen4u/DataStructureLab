using System;
using System.Collections.Generic;
using System.Text;

namespace DataStuctureLab
{
    class HuffmanNode
    {
        public int data;
        public char c;

        public HuffmanNode left;
        public HuffmanNode right;
    }

    class HuffmanCoding
    {
        public static void Run()
        {
            // number of characters. 
            int n = 6;
            char[] charArray = { 'a', 'b', 'c', 'd', 'e', 'f' };
            int[] charfreq = { 5, 9, 12, 13, 16, 45 };

            Encode(charArray, charfreq, n);
        }

        private static void Encode(char[] charArray, int[] charfreq, int n)
        {
            MinHeap minHeap = new MinHeap(n);
            for (int i = 0; i < n; i++)
            {

                // creating a Huffman node object 
                // and add it to the priority queue. 
                HuffmanNode hn = new HuffmanNode();

                hn.c = charArray[i];
                hn.data = charfreq[i];

                hn.left = null;
                hn.right = null;

                // add functions adds 
                // the huffman node to the queue. 
                minHeap.Insert(hn.data, i);
            }

            // create a root node 
            HuffmanNode root = null;

            // Here we will extract the two minimum value 
            // from the heap each time until 
            // its size reduces to 1, extract until 
            // all the nodes are extracted. 
            while (minHeap.Size > 1)
            {
                // first min extract. 
                var x = minHeap.ExtractMin();

                // second min extarct. 
                var y = minHeap.ExtractMin();

                // new node f which is equal 
                HuffmanNode f = new HuffmanNode();

                // to the sum of the frequency of the two nodes 
                // assigning values to the f node. 
                f.data = x.Data + y.Data;
                f.c = '-';

                // first extracted node as left child. 
                f.left = new HuffmanNode() { data = x.Data, c = charArray[x.ListNumber] };

                // second extracted node as the right child. 
                f.right = new HuffmanNode() { data = y.Data, c = charArray[y.ListNumber] }; ;

                // marking the f node as the root node. 
                root = f;

                // add this node to the priority-queue. 
                minHeap.Insert(f.data);
            }

            // print the codes by traversing the tree 
            PrintCode(root, "");
        }
        // recursive function to print the 
        // huffman-code through the tree traversal. 
        // Here s is the huffman - code generated. 
        private static void PrintCode(HuffmanNode root, String s)
        {
            // base case; if the left and right are null 
            // then its a leaf node and we print 
            // the code s generated by traversing the tree. 
            if (root.left == null && root.right == null && Char.IsLetter(root.c))
            {
                // c is the character in the node 
                Console.WriteLine(root.c + ":" + s);

                return;
            }

            // if we go to left then add "0" to the code. 
            // if we go to the right add"1" to the code. 

            // recursive calls for left and 
            // right sub-tree of the generated tree. 
            PrintCode(root.left, s + "0");
            PrintCode(root.right, s + "1");
        }

    }
}
